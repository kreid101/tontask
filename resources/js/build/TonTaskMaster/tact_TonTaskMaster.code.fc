#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TonTaskMaster.headers.fc";
#include "tact_TonTaskMaster.stdlib.fc";
#include "tact_TonTaskMaster.storage.fc";

;;
;; Contract TonTaskMaster functions
;;

(int, slice, (cell, int), int) $TonTaskMaster$_contract_init() impure inline_ref {
    var (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance)) = (0, null(), null(), 500000000);
    $self'owner = __tact_context_get_sender();
    ($self'childAddresses'address, $self'childAddresses'length) = $TaskAddresses$_constructor_address_length(null(), 0);
    return ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance);
}

((int, slice, (cell, int), int), slice) $TonTaskMaster$_fun_balance((int, slice, (cell, int), int) $self) impure inline_ref {
    var (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance)) = $self;
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), $Int$_fun_toCoinsString(__tact_my_balance()));
}

((int, slice, (cell, int), int), slice) $TonTaskMaster$_fun_addressOfChild((int, slice, (cell, int), int) $self, int $id) impure inline_ref {
    var (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance)) = $self;
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), __tact_dict_get_uint_slice($self'childAddresses'address, 32, $id));
}

((int, slice, (cell, int), int), slice) $TonTaskMaster$_fun_owner((int, slice, (cell, int), int) $self) impure inline_ref {
    var (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance)) = $self;
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), $self'owner);
}

;;
;; Receivers of a Contract TonTaskMaster
;;

(((int, slice, (cell, int), int)), ()) $TonTaskMaster$_internal_binary_InternalTask((int, slice, (cell, int), int) $self, (int, slice, slice, int) $msg) impure inline {
    var ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance) = $self;
    var ($msg'id, $msg'creator, $msg'executor, $msg'coin_amount) = $msg;
    var ($init'code, $init'data) = $TonTaskChild$_init_child(__tact_context_sys, ($msg'id, $msg'creator, $msg'executor, $msg'coin_amount));
    $global_send($SendParameters$_constructor_to_value_mode_code_data($global_contractAddress(($init'code, $init'data)), 0, (64 | 2), $init'code, $init'data));
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), ());
}

(((int, slice, (cell, int), int)), ()) $TonTaskMaster$_internal_binary_ChildCallback((int, slice, (cell, int), int) $self, (int, slice) $msg) impure inline {
    var ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance) = $self;
    var ($msg'id, $msg'address) = $msg;
    $self'childAddresses'length = ($self'childAddresses'length + 1);
    $self'childAddresses'address~__tact_dict_set_uint_slice(32, $msg'id, $msg'address);
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), ());
}

(((int, slice, (cell, int), int)), ()) %$TonTaskMaster$_internal_empty((int, slice, (cell, int), int) $self) impure inline {
    var ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance) = $self;
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), ());
}

(((int, slice, (cell, int), int)), ()) $TonTaskMaster$_internal_binary_Deploy((int, slice, (cell, int), int) $self, (int) $deploy) impure inline {
    var ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance)~$TonTaskMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'taskCount, $self'owner, ($self'childAddresses'address, $self'childAddresses'length), $self'min_balance), ());
}

;;
;; Get methods of a Contract TonTaskMaster
;;

_ %balance() method_id(104128) {
    var self = $TonTaskMaster$_contract_load();
    var res = self~$TonTaskMaster$_fun_balance();
    return res;
}

_ %addressOfChild(int $$id) method_id(109656) {
    int $id = $$id;
    var self = $TonTaskMaster$_contract_load();
    var res = self~$TonTaskMaster$_fun_addressOfChild($id);
    return res;
}

_ %owner() method_id(83229) {
    var self = $TonTaskMaster$_contract_load();
    var res = self~$TonTaskMaster$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://Qmdf3gm6EcJ5MtSxLgsmPVkiwbeQWv5kz7BXgZNc8mM3oV";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TonTaskMaster
;;

((int, slice, (cell, int), int), int) $TonTaskMaster$_contract_router_internal((int, slice, (cell, int), int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalTask message
    if (op == 170908148) {
        var msg = in_msg~$InternalTask$_load();
        self~$TonTaskMaster$_internal_binary_InternalTask(msg);
        return (self, true);
    }
    
    ;; Receive ChildCallback message
    if (op == 2083249270) {
        var msg = in_msg~$ChildCallback$_load();
        self~$TonTaskMaster$_internal_binary_ChildCallback(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$TonTaskMaster$_internal_empty();
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TonTaskMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TonTaskMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$TonTaskMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TonTaskMaster$_contract_store(self);
}
