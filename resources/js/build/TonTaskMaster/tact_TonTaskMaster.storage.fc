;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data(slice to, int value, int mode, cell code, cell data) inline {
    return (true, to, value, mode, null(), code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: InternalTask
;; Header: 0x0a2fd9f4
;; TLB: internal_task#0a2fd9f4 id:uint128 creator:address executor:address coin_amount:uint64 = InternalTask
;;

builder $InternalTask$_store(builder build_0, (int, slice, slice, int) v) inline {
    var (v'id, v'creator, v'executor, v'coin_amount) = v;
    build_0 = store_uint(build_0, 170908148, 32);
    build_0 = build_0.store_uint(v'id, 128);
    build_0 = __tact_store_address(build_0, v'creator);
    build_0 = __tact_store_address(build_0, v'executor);
    build_0 = build_0.store_uint(v'coin_amount, 64);
    return build_0;
}

(slice, ((int, slice, slice, int))) $InternalTask$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 170908148);
    var v'id = sc_0~load_uint(128);
    var v'creator = sc_0~__tact_load_address();
    var v'executor = sc_0~__tact_load_address();
    var v'coin_amount = sc_0~load_uint(64);
    return (sc_0, (v'id, v'creator, v'executor, v'coin_amount));
}

;;
;; Type: ChildCallback
;; Header: 0x7c2bdc76
;; TLB: child_callback#7c2bdc76 id:uint64 address:address = ChildCallback
;;

(slice, ((int, slice))) $ChildCallback$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2083249270);
    var v'id = sc_0~load_uint(64);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'id, v'address));
}

;;
;; Type: TaskAddresses
;; TLB: _ address:dict<uint32, address> length:uint32 = TaskAddresses
;;

builder $TaskAddresses$_store(builder build_0, (cell, int) v) inline {
    var (v'address, v'length) = v;
    build_0 = build_0.store_dict(v'address);
    build_0 = build_0.store_uint(v'length, 32);
    return build_0;
}

(slice, ((cell, int))) $TaskAddresses$_load(slice sc_0) inline {
    var v'address = sc_0~load_dict();
    var v'length = sc_0~load_uint(32);
    return (sc_0, (v'address, v'length));
}

((cell, int)) $TaskAddresses$_constructor_address_length(cell address, int length) inline {
    return (address, length);
}

;;
;; Type: TonTaskChild
;;

builder $TonTaskChild$init$_store(builder build_0, ((int, slice, slice, int)) v) inline {
    var ((v'msg'id, v'msg'creator, v'msg'executor, v'msg'coin_amount)) = v;
    build_0 = $InternalTask$_store(build_0, (v'msg'id, v'msg'creator, v'msg'executor, v'msg'coin_amount));
    return build_0;
}

(cell, cell) $TonTaskChild$_init_child(cell sys', (int, slice, slice, int) $msg) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TonTaskChild
    cell mine = __tact_dict_get_code(source, 11893);
    contracts = __tact_dict_set_code(contracts, 11893, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TonTaskChild$init$_store(b, ($msg));
    return (mine, b.end_cell());
}

;;
;; Type: TonTaskMaster
;;

builder $TonTaskMaster$_store(builder build_0, (int, slice, (cell, int), int) v) inline {
    var (v'taskCount, v'owner, (v'childAddresses'address, v'childAddresses'length), v'min_balance) = v;
    build_0 = build_0.store_uint(v'taskCount, 128);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = $TaskAddresses$_store(build_0, (v'childAddresses'address, v'childAddresses'length));
    build_0 = build_0.store_int(v'min_balance, 257);
    return build_0;
}

(slice, ((int, slice, (cell, int), int))) $TonTaskMaster$_load(slice sc_0) inline {
    var v'taskCount = sc_0~load_uint(128);
    var v'owner = sc_0~__tact_load_address();
    var v'childAddresses = sc_0~$TaskAddresses$_load();
    var v'min_balance = sc_0~load_int(257);
    return (sc_0, (v'taskCount, v'owner, v'childAddresses, v'min_balance));
}

(int, slice, (cell, int), int) $TonTaskMaster$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TonTaskMaster$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $TonTaskMaster$_contract_init();
    }
}

() $TonTaskMaster$_contract_store((int, slice, (cell, int), int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TonTaskMaster$_store(b, v);
    set_data(b.end_cell());
}